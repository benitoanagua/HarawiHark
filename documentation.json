{
    "pipes": [],
    "interfaces": [
        {
            "name": "DocumentationItem",
            "id": "interface-DocumentationItem-331cbed1df1d5be59ce014198c4b9f0ccfe0e5f0a69250e5c5627453a8c004ba8506d71d76019a4a7937c0deab1657d12ef0d4d87475681198d6fec9750a87eb",
            "file": "src/app/services/app-data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface MetroTile {\n  label: string;\n  color: string;\n  icon: string;\n}\n\nexport interface DocumentationItem {\n  title: string;\n  description: string;\n  icon: string;\n}\n\nexport interface NavigationItem {\n  title: string;\n  icon: string;\n  description: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppDataService {\n  readonly metroTiles: MetroTile[] = [\n    { label: 'Mail', color: 'var(--color-primary)', icon: 'icon-[iconoir--mail]' },\n    { label: 'Calendar', color: 'var(--color-error)', icon: 'icon-[iconoir--calendar]' },\n    { label: 'Photos', color: 'var(--color-primaryContainer)', icon: 'icon-[iconoir--camera]' },\n    { label: 'Store', color: 'var(--color-surfaceVariant)', icon: 'icon-[iconoir--shop]' },\n  ];\n\n  readonly documentation: DocumentationItem[] = [\n    {\n      title: 'Design Principles',\n      description: 'Learn the core principles of Metro UI design language',\n      icon: 'icon-[iconoir--design-nib]',\n    },\n    {\n      title: 'Component Library',\n      description: 'Browse our collection of Metro-styled components',\n      icon: 'icon-[iconoir--view-grid]',\n    },\n    {\n      title: 'Typography Scale',\n      description: 'Understand the typographic hierarchy and spacing',\n      icon: 'icon-[iconoir--text-box]',\n    },\n    {\n      title: 'Motion Guidelines',\n      description: 'Implement meaningful animations and transitions',\n      icon: 'icon-[iconoir--flash]',\n    },\n  ];\n\n  readonly navigationItems: NavigationItem[] = [\n    {\n      title: 'Explore Documentation',\n      icon: 'icon-[iconoir--book-stack]',\n      description: 'Learn about Angular features',\n    },\n    {\n      title: 'Tutorials',\n      icon: 'icon-[iconoir--graduation-cap]',\n      description: 'Step-by-step learning guides',\n    },\n    {\n      title: 'AI Development',\n      icon: 'icon-[iconoir--chat-bubble]',\n      description: 'Build with AI assistance',\n    },\n    {\n      title: 'CLI Tools',\n      icon: 'icon-[iconoir--terminal]',\n      description: 'Command line interface docs',\n    },\n  ];\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "MetroTile",
            "id": "interface-MetroTile-331cbed1df1d5be59ce014198c4b9f0ccfe0e5f0a69250e5c5627453a8c004ba8506d71d76019a4a7937c0deab1657d12ef0d4d87475681198d6fec9750a87eb",
            "file": "src/app/services/app-data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface MetroTile {\n  label: string;\n  color: string;\n  icon: string;\n}\n\nexport interface DocumentationItem {\n  title: string;\n  description: string;\n  icon: string;\n}\n\nexport interface NavigationItem {\n  title: string;\n  icon: string;\n  description: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppDataService {\n  readonly metroTiles: MetroTile[] = [\n    { label: 'Mail', color: 'var(--color-primary)', icon: 'icon-[iconoir--mail]' },\n    { label: 'Calendar', color: 'var(--color-error)', icon: 'icon-[iconoir--calendar]' },\n    { label: 'Photos', color: 'var(--color-primaryContainer)', icon: 'icon-[iconoir--camera]' },\n    { label: 'Store', color: 'var(--color-surfaceVariant)', icon: 'icon-[iconoir--shop]' },\n  ];\n\n  readonly documentation: DocumentationItem[] = [\n    {\n      title: 'Design Principles',\n      description: 'Learn the core principles of Metro UI design language',\n      icon: 'icon-[iconoir--design-nib]',\n    },\n    {\n      title: 'Component Library',\n      description: 'Browse our collection of Metro-styled components',\n      icon: 'icon-[iconoir--view-grid]',\n    },\n    {\n      title: 'Typography Scale',\n      description: 'Understand the typographic hierarchy and spacing',\n      icon: 'icon-[iconoir--text-box]',\n    },\n    {\n      title: 'Motion Guidelines',\n      description: 'Implement meaningful animations and transitions',\n      icon: 'icon-[iconoir--flash]',\n    },\n  ];\n\n  readonly navigationItems: NavigationItem[] = [\n    {\n      title: 'Explore Documentation',\n      icon: 'icon-[iconoir--book-stack]',\n      description: 'Learn about Angular features',\n    },\n    {\n      title: 'Tutorials',\n      icon: 'icon-[iconoir--graduation-cap]',\n      description: 'Step-by-step learning guides',\n    },\n    {\n      title: 'AI Development',\n      icon: 'icon-[iconoir--chat-bubble]',\n      description: 'Build with AI assistance',\n    },\n    {\n      title: 'CLI Tools',\n      icon: 'icon-[iconoir--terminal]',\n      description: 'Command line interface docs',\n    },\n  ];\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "NavigationItem",
            "id": "interface-NavigationItem-331cbed1df1d5be59ce014198c4b9f0ccfe0e5f0a69250e5c5627453a8c004ba8506d71d76019a4a7937c0deab1657d12ef0d4d87475681198d6fec9750a87eb",
            "file": "src/app/services/app-data.service.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface MetroTile {\n  label: string;\n  color: string;\n  icon: string;\n}\n\nexport interface DocumentationItem {\n  title: string;\n  description: string;\n  icon: string;\n}\n\nexport interface NavigationItem {\n  title: string;\n  icon: string;\n  description: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppDataService {\n  readonly metroTiles: MetroTile[] = [\n    { label: 'Mail', color: 'var(--color-primary)', icon: 'icon-[iconoir--mail]' },\n    { label: 'Calendar', color: 'var(--color-error)', icon: 'icon-[iconoir--calendar]' },\n    { label: 'Photos', color: 'var(--color-primaryContainer)', icon: 'icon-[iconoir--camera]' },\n    { label: 'Store', color: 'var(--color-surfaceVariant)', icon: 'icon-[iconoir--shop]' },\n  ];\n\n  readonly documentation: DocumentationItem[] = [\n    {\n      title: 'Design Principles',\n      description: 'Learn the core principles of Metro UI design language',\n      icon: 'icon-[iconoir--design-nib]',\n    },\n    {\n      title: 'Component Library',\n      description: 'Browse our collection of Metro-styled components',\n      icon: 'icon-[iconoir--view-grid]',\n    },\n    {\n      title: 'Typography Scale',\n      description: 'Understand the typographic hierarchy and spacing',\n      icon: 'icon-[iconoir--text-box]',\n    },\n    {\n      title: 'Motion Guidelines',\n      description: 'Implement meaningful animations and transitions',\n      icon: 'icon-[iconoir--flash]',\n    },\n  ];\n\n  readonly navigationItems: NavigationItem[] = [\n    {\n      title: 'Explore Documentation',\n      icon: 'icon-[iconoir--book-stack]',\n      description: 'Learn about Angular features',\n    },\n    {\n      title: 'Tutorials',\n      icon: 'icon-[iconoir--graduation-cap]',\n      description: 'Step-by-step learning guides',\n    },\n    {\n      title: 'AI Development',\n      icon: 'icon-[iconoir--chat-bubble]',\n      description: 'Build with AI assistance',\n    },\n    {\n      title: 'CLI Tools',\n      icon: 'icon-[iconoir--terminal]',\n      description: 'Command line interface docs',\n    },\n  ];\n}\n",
            "properties": [
                {
                    "name": "description",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-8e6d7a41a58bad4fc6aadd9c78fec981bf912759b5a447b0949f9cfdc227641ea2654bdcb0f99b7b7ddd06321a3f7a50b16c2e2b77a4ce6a19bbd603bc3c0ec8",
            "file": "src/app/components/header/header.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ButtonComponent } from '../button/button.component';\nimport { ThemeToggleComponent } from '../theme-toggle/theme-toggle.component';\n\nexport interface User {\n  name: string;\n}\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [ButtonComponent, ThemeToggleComponent],\n  templateUrl: './header.component.html',\n})\nexport class HeaderComponent {\n  @Input() user: User | null = null;\n  @Output() login = new EventEmitter<Event>();\n  @Output() logout = new EventEmitter<Event>();\n  @Output() createAccount = new EventEmitter<Event>();\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 172,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AppDataService",
            "id": "injectable-AppDataService-331cbed1df1d5be59ce014198c4b9f0ccfe0e5f0a69250e5c5627453a8c004ba8506d71d76019a4a7937c0deab1657d12ef0d4d87475681198d6fec9750a87eb",
            "file": "src/app/services/app-data.service.ts",
            "properties": [
                {
                    "name": "documentation",
                    "defaultValue": "[\n    {\n      title: 'Design Principles',\n      description: 'Learn the core principles of Metro UI design language',\n      icon: 'icon-[iconoir--design-nib]',\n    },\n    {\n      title: 'Component Library',\n      description: 'Browse our collection of Metro-styled components',\n      icon: 'icon-[iconoir--view-grid]',\n    },\n    {\n      title: 'Typography Scale',\n      description: 'Understand the typographic hierarchy and spacing',\n      icon: 'icon-[iconoir--text-box]',\n    },\n    {\n      title: 'Motion Guidelines',\n      description: 'Implement meaningful animations and transitions',\n      icon: 'icon-[iconoir--flash]',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "DocumentationItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "metroTiles",
                    "defaultValue": "[\n    { label: 'Mail', color: 'var(--color-primary)', icon: 'icon-[iconoir--mail]' },\n    { label: 'Calendar', color: 'var(--color-error)', icon: 'icon-[iconoir--calendar]' },\n    { label: 'Photos', color: 'var(--color-primaryContainer)', icon: 'icon-[iconoir--camera]' },\n    { label: 'Store', color: 'var(--color-surfaceVariant)', icon: 'icon-[iconoir--shop]' },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MetroTile[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "navigationItems",
                    "defaultValue": "[\n    {\n      title: 'Explore Documentation',\n      icon: 'icon-[iconoir--book-stack]',\n      description: 'Learn about Angular features',\n    },\n    {\n      title: 'Tutorials',\n      icon: 'icon-[iconoir--graduation-cap]',\n      description: 'Step-by-step learning guides',\n    },\n    {\n      title: 'AI Development',\n      icon: 'icon-[iconoir--chat-bubble]',\n      description: 'Build with AI assistance',\n    },\n    {\n      title: 'CLI Tools',\n      icon: 'icon-[iconoir--terminal]',\n      description: 'Command line interface docs',\n    },\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "NavigationItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\n\nexport interface MetroTile {\n  label: string;\n  color: string;\n  icon: string;\n}\n\nexport interface DocumentationItem {\n  title: string;\n  description: string;\n  icon: string;\n}\n\nexport interface NavigationItem {\n  title: string;\n  icon: string;\n  description: string;\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class AppDataService {\n  readonly metroTiles: MetroTile[] = [\n    { label: 'Mail', color: 'var(--color-primary)', icon: 'icon-[iconoir--mail]' },\n    { label: 'Calendar', color: 'var(--color-error)', icon: 'icon-[iconoir--calendar]' },\n    { label: 'Photos', color: 'var(--color-primaryContainer)', icon: 'icon-[iconoir--camera]' },\n    { label: 'Store', color: 'var(--color-surfaceVariant)', icon: 'icon-[iconoir--shop]' },\n  ];\n\n  readonly documentation: DocumentationItem[] = [\n    {\n      title: 'Design Principles',\n      description: 'Learn the core principles of Metro UI design language',\n      icon: 'icon-[iconoir--design-nib]',\n    },\n    {\n      title: 'Component Library',\n      description: 'Browse our collection of Metro-styled components',\n      icon: 'icon-[iconoir--view-grid]',\n    },\n    {\n      title: 'Typography Scale',\n      description: 'Understand the typographic hierarchy and spacing',\n      icon: 'icon-[iconoir--text-box]',\n    },\n    {\n      title: 'Motion Guidelines',\n      description: 'Implement meaningful animations and transitions',\n      icon: 'icon-[iconoir--flash]',\n    },\n  ];\n\n  readonly navigationItems: NavigationItem[] = [\n    {\n      title: 'Explore Documentation',\n      icon: 'icon-[iconoir--book-stack]',\n      description: 'Learn about Angular features',\n    },\n    {\n      title: 'Tutorials',\n      icon: 'icon-[iconoir--graduation-cap]',\n      description: 'Step-by-step learning guides',\n    },\n    {\n      title: 'AI Development',\n      icon: 'icon-[iconoir--chat-bubble]',\n      description: 'Build with AI assistance',\n    },\n    {\n      title: 'CLI Tools',\n      icon: 'icon-[iconoir--terminal]',\n      description: 'Command line interface docs',\n    },\n  ];\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ThemeService",
            "id": "injectable-ThemeService-eb0a14693c99d5a747e1b15c8801151fe40229ec9c63b60b26b5aaae24252d941375e426f3836e3816b01f27e79a6fead9ac2666a47f86b491549df40bb3a721",
            "file": "src/app/services/theme.service.ts",
            "properties": [
                {
                    "name": "currentTheme",
                    "defaultValue": "signal<Theme>(this.getInitialTheme())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        148
                    ]
                },
                {
                    "name": "THEME_KEY",
                    "defaultValue": "'app-theme'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methods": [
                {
                    "name": "applyTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getInitialTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "Theme",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "setTheme",
                    "args": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "theme",
                            "type": "Theme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal, effect } from '@angular/core';\n\nexport type Theme = 'light' | 'dark';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ThemeService {\n  private readonly THEME_KEY = 'app-theme';\n\n  readonly currentTheme = signal<Theme>(this.getInitialTheme());\n\n  constructor() {\n    effect(() => {\n      this.applyTheme(this.currentTheme());\n    });\n  }\n\n  private getInitialTheme(): Theme {\n    const stored = localStorage.getItem(this.THEME_KEY) as Theme | null;\n    if (stored === 'light' || stored === 'dark') {\n      return stored;\n    }\n\n    if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n      return 'dark';\n    }\n\n    return 'light';\n  }\n\n  private applyTheme(theme: Theme): void {\n    document.documentElement.setAttribute('data-theme', theme);\n    localStorage.setItem(this.THEME_KEY, theme);\n  }\n\n  toggleTheme(): void {\n    this.currentTheme.update((current) => (current === 'light' ? 'dark' : 'light'));\n  }\n\n  setTheme(theme: Theme): void {\n    this.currentTheme.set(theme);\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "App",
            "id": "component-App-0d7c9d494c058a767664afe5d20265bfe5325d8ff598f740efa2cdf74f9e01f584204c6a1f3a3d4f031655ce0fa2110db912998a954ed1c7bfcf09699736e214",
            "file": "src/app/app.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [
                {
                    "name": "PageComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { PageComponent } from './components/page/page.component';\n\n@Component({\n  selector: 'app-root',\n  imports: [PageComponent],\n  templateUrl: './app.html',\n  styleUrl: './app.css',\n})\nexport class App {}\n",
            "styleUrl": "./app.css",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-page></app-page>"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-999efe51c9141fafd14635ee09a50f10177c2cfac20ebe06bf2d9ccaf1d7cf71531a80d581e2d70dbd3c56cab510ce1f4b0b819254dfdfafbdd67b60ee6fdba0",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "\"primary\" | \"secondary\" | \"outline\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "clicked",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  templateUrl: './button.component.html',\n})\nexport class ButtonComponent {\n  @Input() variant: 'primary' | 'secondary' | 'outline' = 'primary';\n  @Input() size: 'small' | 'medium' | 'large' = 'medium';\n  @Input() label = 'Button';\n  @Input() icon?: string;\n  @Output() clicked = new EventEmitter<Event>();\n\n  get buttonClasses(): string {\n    const sizeClasses = {\n      small: 'btn-small',\n      medium: 'btn-medium',\n      large: 'btn-large',\n    };\n\n    const variantClasses = {\n      primary: 'btn-primary',\n      secondary: 'btn-secondary',\n      outline: 'btn-outline',\n    };\n\n    return `btn-base ${sizeClasses[this.size]} ${variantClasses[this.variant]}`;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "accessors": {
                "buttonClasses": {
                    "name": "buttonClasses",
                    "getSignature": {
                        "name": "buttonClasses",
                        "type": "string",
                        "returnType": "string",
                        "line": 15
                    }
                }
            },
            "templateData": "<button\n  type=\"button\"\n  (click)=\"clicked.emit($event)\"\n  [class]=\"buttonClasses\"\n>\n  @if (icon) {\n    <span [class]=\"icon\" class=\"mr-2\"></span>\n  }\n  {{ label }}\n</button>"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-8e6d7a41a58bad4fc6aadd9c78fec981bf912759b5a447b0949f9cfdc227641ea2654bdcb0f99b7b7ddd06321a3f7a50b16c2e2b77a4ce6a19bbd603bc3c0ec8",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "createAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "EventEmitter"
                },
                {
                    "name": "login",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                },
                {
                    "name": "logout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ThemeToggleComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { ButtonComponent } from '../button/button.component';\nimport { ThemeToggleComponent } from '../theme-toggle/theme-toggle.component';\n\nexport interface User {\n  name: string;\n}\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [ButtonComponent, ThemeToggleComponent],\n  templateUrl: './header.component.html',\n})\nexport class HeaderComponent {\n  @Input() user: User | null = null;\n  @Output() login = new EventEmitter<Event>();\n  @Output() logout = new EventEmitter<Event>();\n  @Output() createAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<header class=\"storybook-header\">\n  <div class=\"header-content\">\n    <div class=\"logo-section\">\n      <div class=\"logo-wrapper\">\n        <span class=\"icon-[iconoir--windows] text-2xl text-primary\"></span>\n        <h1 class=\"logo-title\">Metro UI</h1>\n      </div>\n    </div>\n\n    <div class=\"nav-section\">\n      <app-theme-toggle />\n      \n      @if (user) {\n        <div class=\"user-section\">\n          <span class=\"welcome-text\">\n            Welcome, <b class=\"user-name\">{{ user.name }}</b>!\n          </span>\n          <app-button\n            size=\"small\"\n            variant=\"outline\"\n            (clicked)=\"logout.emit($event)\"\n            label=\"Log out\"\n            icon=\"icon-[iconoir--log-out]\"\n          />\n        </div>\n      } @else {\n        <div class=\"auth-section\">\n          <app-button\n            size=\"small\"\n            variant=\"outline\"\n            (clicked)=\"login.emit($event)\"\n            label=\"Log in\"\n            icon=\"icon-[iconoir--log-in]\"\n          />\n          <app-button\n            size=\"small\"\n            variant=\"primary\"\n            (clicked)=\"createAccount.emit($event)\"\n            label=\"Sign up\"\n            icon=\"icon-[iconoir--user]\"\n          />\n        </div>\n      }\n    </div>\n  </div>\n</header>"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-cd7714038fef4071214e439c326ff9d66c5bdea0527ecbcd00e7653fd76a7043b4d38bf2718cc98ef85833cee0b86c2134801cd11b429c35e399ab3c392b57e9",
            "file": "src/app/components/page/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "appData",
                    "defaultValue": "inject(AppDataService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123,
                        148
                    ]
                },
                {
                    "name": "documentation",
                    "defaultValue": "this.appData.documentation",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "metroTiles",
                    "defaultValue": "this.appData.metroTiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, inject } from '@angular/core';\nimport { HeaderComponent, type User } from '../header/header.component';\nimport { AppDataService } from '../../services/app-data.service';\n\n@Component({\n  selector: 'app-page',\n  standalone: true,\n  imports: [HeaderComponent],\n  templateUrl: './page.component.html',\n})\nexport class PageComponent {\n  private readonly appData = inject(AppDataService);\n\n  @Input() user: User | null = null;\n\n  protected readonly metroTiles = this.appData.metroTiles;\n  protected readonly documentation = this.appData.documentation;\n\n  doLogout(): void {\n    this.user = null;\n  }\n\n  doLogin(): void {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount(): void {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<article class=\"storybook-page\">\n  <app-header\n    [user]=\"user\"\n    (logout)=\"doLogout()\"\n    (login)=\"doLogin()\"\n    (createAccount)=\"doCreateAccount()\"\n  />\n  \n  <section class=\"page-content\">\n    <!-- Hero Section -->\n    <div class=\"hero-section\">\n      <h2 class=\"hero-title\">Metro UI Design System</h2>\n      <p class=\"hero-subtitle\">\n        Building modern interfaces with Windows Phone inspiration\n      </p>\n    </div>\n\n    <!-- Content Grid -->\n    <div class=\"content-grid\">\n      <!-- Tiles Section -->\n      <div class=\"tiles-section\">\n        <h3 class=\"section-title\">Application Tiles</h3>\n        <div class=\"tiles-grid\">\n          @for (tile of metroTiles; track tile.label) {\n            <div \n              class=\"metro-tile-story\"\n              [style.background]=\"tile.color\"\n            >\n              <span [class]=\"tile.icon\" class=\"tile-icon\"></span>\n              <span class=\"tile-label\">{{ tile.label }}</span>\n            </div>\n          }\n        </div>\n      </div>\n\n      <!-- Documentation Section -->\n      <div class=\"docs-section\">\n        <h3 class=\"section-title\">Getting Started</h3>\n        <div class=\"docs-list\">\n          @for (doc of documentation; track doc.title) {\n            <div class=\"doc-item\">\n              <span [class]=\"doc.icon\" class=\"doc-icon\"></span>\n              <div class=\"doc-content\">\n                <h4 class=\"doc-title\">{{ doc.title }}</h4>\n                <p class=\"doc-description\">{{ doc.description }}</p>\n              </div>\n              <span class=\"icon-[iconoir--arrow-right] doc-arrow\"></span>\n            </div>\n          }\n        </div>\n      </div>\n    </div>\n\n    <!-- Tips Section -->\n    <div class=\"tips-section\">\n      <div class=\"tip-wrapper\">\n        <span class=\"icon-[iconoir--light-bulb] tip-badge\"></span>\n        <p class=\"tip-text\">\n          Metro UI emphasizes clean typography, meaningful motion, and content-first design.\n          Use ample whitespace and focus on readability.\n        </p>\n      </div>\n    </div>\n  </section>\n</article>"
        },
        {
            "name": "ThemeToggleComponent",
            "id": "component-ThemeToggleComponent-eb0f882ef1c602de79d6daac4e43f3bb98d73d201891bf090c3b676a717e9b78607f5d38c559409230a2ae6474d95d7d35d873625a992a8c8951a67f5162208a",
            "file": "src/app/components/theme-toggle/theme-toggle.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-theme-toggle",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./theme-toggle.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentTheme",
                    "defaultValue": "this.themeService.currentTheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        124,
                        148
                    ]
                },
                {
                    "name": "themeService",
                    "defaultValue": "inject(ThemeService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123,
                        148
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject } from '@angular/core';\nimport { ThemeService } from '../../services/theme.service';\n\n@Component({\n  selector: 'app-theme-toggle',\n  standalone: true,\n  templateUrl: './theme-toggle.component.html',\n})\nexport class ThemeToggleComponent {\n  private readonly themeService = inject(ThemeService);\n\n  protected readonly currentTheme = this.themeService.currentTheme;\n\n  toggleTheme(): void {\n    this.themeService.toggleTheme();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button\n  type=\"button\"\n  class=\"theme-toggle\"\n  (click)=\"toggleTheme()\"\n  [attr.aria-label]=\"'Switch to ' + (currentTheme() === 'light' ? 'dark' : 'light') + ' theme'\"\n>\n  @if (currentTheme() === 'light') {\n    <span class=\"icon-[iconoir--sun-light] text-xl\"></span>\n  } @else {\n    <span class=\"icon-[iconoir--moon-sat] text-xl\"></span>\n  }\n</button>"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideBrowserGlobalErrorListeners(),\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes)\n  ]\n}"
            },
            {
                "name": "outputDir",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/material-theme/cli.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'src/styles'"
            },
            {
                "name": "root",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/material-theme/cli.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "process.cwd()"
            },
            {
                "name": "routes",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.routes.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Routes",
                "defaultValue": "[]"
            },
            {
                "name": "SCHEMES",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/material-theme/theme.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "literal type[]",
                "defaultValue": "[\n  { name: 'tonal-spot', variant: SchemeTonalSpot },\n  { name: 'neutral', variant: SchemeNeutral },\n  { name: 'vibrant', variant: SchemeVibrant },\n  { name: 'expressive', variant: SchemeExpressive },\n  { name: 'monochrome', variant: SchemeMonochrome },\n  { name: 'content', variant: SchemeContent },\n  { name: 'fidelity', variant: SchemeFidelity },\n  { name: 'fruit-salad', variant: SchemeFruitSalad },\n  { name: 'rainbow', variant: SchemeRainbow },\n]"
            },
            {
                "name": "SEED_COLOR",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/material-theme/theme.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'#4b0082'"
            },
            {
                "name": "SELECTED_SCHEME",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/material-theme/theme.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'neutral'"
            },
            {
                "name": "THEME_CSS_VARS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/material-theme/theme-generator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  'primary',\n  'onPrimary',\n  'primaryContainer',\n  'onPrimaryContainer',\n  'secondary',\n  'onSecondary',\n  'secondaryContainer',\n  'onSecondaryContainer',\n  'tertiary',\n  'onTertiary',\n  'tertiaryContainer',\n  'onTertiaryContainer',\n  'error',\n  'onError',\n  'errorContainer',\n  'onErrorContainer',\n  'background',\n  'onBackground',\n  'surface',\n  'surfaceDim',\n  'surfaceBright',\n  'surfaceContainerLowest',\n  'surfaceContainerLow',\n  'surfaceContainer',\n  'surfaceContainerHigh',\n  'surfaceContainerHighest',\n  'onSurface',\n  'surfaceVariant',\n  'onSurfaceVariant',\n  'outline',\n  'outlineVariant',\n  'shadow',\n  'scrim',\n  'inverseSurface',\n  'inverseOnSurface',\n  'inversePrimary',\n]"
            }
        ],
        "functions": [
            {
                "name": "extractColors",
                "file": "src/lib/material-theme/theme-generator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "scheme",
                        "type": "DynamicScheme",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "Record<string, string>",
                "jsdoctags": [
                    {
                        "name": "scheme",
                        "type": "DynamicScheme",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "generateThemeFiles",
                "file": "src/lib/material-theme/theme-generator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "root",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "outputDir",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "void",
                "jsdoctags": [
                    {
                        "name": "root",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "outputDir",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            {
                "name": "getColorFromScheme",
                "file": "src/lib/material-theme/theme-generator.ts",
                "ctype": "miscellaneous",
                "subtype": "function",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "args": [
                    {
                        "name": "prop",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "scheme",
                        "type": "DynamicScheme",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "returnType": "number",
                "jsdoctags": [
                    {
                        "name": "prop",
                        "type": "string",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "scheme",
                        "type": "DynamicScheme",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            }
        ],
        "typealiases": [
            {
                "name": "SchemeConstructor",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "",
                "file": "src/lib/material-theme/theme.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 186
            },
            {
                "name": "Theme",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"light\" | \"dark\"",
                "file": "src/app/services/theme.service.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 193
            }
        ],
        "enumerations": [],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideBrowserGlobalErrorListeners(),\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideRouter(routes)\n  ]\n}"
                }
            ],
            "src/lib/material-theme/cli.ts": [
                {
                    "name": "outputDir",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/material-theme/cli.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'src/styles'"
                },
                {
                    "name": "root",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/material-theme/cli.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "process.cwd()"
                }
            ],
            "src/app/app.routes.ts": [
                {
                    "name": "routes",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.routes.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Routes",
                    "defaultValue": "[]"
                }
            ],
            "src/lib/material-theme/theme.config.ts": [
                {
                    "name": "SCHEMES",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/material-theme/theme.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type[]",
                    "defaultValue": "[\n  { name: 'tonal-spot', variant: SchemeTonalSpot },\n  { name: 'neutral', variant: SchemeNeutral },\n  { name: 'vibrant', variant: SchemeVibrant },\n  { name: 'expressive', variant: SchemeExpressive },\n  { name: 'monochrome', variant: SchemeMonochrome },\n  { name: 'content', variant: SchemeContent },\n  { name: 'fidelity', variant: SchemeFidelity },\n  { name: 'fruit-salad', variant: SchemeFruitSalad },\n  { name: 'rainbow', variant: SchemeRainbow },\n]"
                },
                {
                    "name": "SEED_COLOR",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/material-theme/theme.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'#4b0082'"
                },
                {
                    "name": "SELECTED_SCHEME",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/material-theme/theme.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'neutral'"
                }
            ],
            "src/lib/material-theme/theme-generator.ts": [
                {
                    "name": "THEME_CSS_VARS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/material-theme/theme-generator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  'primary',\n  'onPrimary',\n  'primaryContainer',\n  'onPrimaryContainer',\n  'secondary',\n  'onSecondary',\n  'secondaryContainer',\n  'onSecondaryContainer',\n  'tertiary',\n  'onTertiary',\n  'tertiaryContainer',\n  'onTertiaryContainer',\n  'error',\n  'onError',\n  'errorContainer',\n  'onErrorContainer',\n  'background',\n  'onBackground',\n  'surface',\n  'surfaceDim',\n  'surfaceBright',\n  'surfaceContainerLowest',\n  'surfaceContainerLow',\n  'surfaceContainer',\n  'surfaceContainerHigh',\n  'surfaceContainerHighest',\n  'onSurface',\n  'surfaceVariant',\n  'onSurfaceVariant',\n  'outline',\n  'outlineVariant',\n  'shadow',\n  'scrim',\n  'inverseSurface',\n  'inverseOnSurface',\n  'inversePrimary',\n]"
                }
            ]
        },
        "groupedFunctions": {
            "src/lib/material-theme/theme-generator.ts": [
                {
                    "name": "extractColors",
                    "file": "src/lib/material-theme/theme-generator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "scheme",
                            "type": "DynamicScheme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "Record<string, string>",
                    "jsdoctags": [
                        {
                            "name": "scheme",
                            "type": "DynamicScheme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "generateThemeFiles",
                    "file": "src/lib/material-theme/theme-generator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "root",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "outputDir",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "void",
                    "jsdoctags": [
                        {
                            "name": "root",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "outputDir",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getColorFromScheme",
                    "file": "src/lib/material-theme/theme-generator.ts",
                    "ctype": "miscellaneous",
                    "subtype": "function",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "args": [
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "scheme",
                            "type": "DynamicScheme",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "returnType": "number",
                    "jsdoctags": [
                        {
                            "name": "prop",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "scheme",
                            "type": "DynamicScheme",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ]
        },
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/lib/material-theme/theme.config.ts": [
                {
                    "name": "SchemeConstructor",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "",
                    "file": "src/lib/material-theme/theme.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 186
                }
            ],
            "src/app/services/theme.service.ts": [
                {
                    "name": "Theme",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"light\" | \"dark\"",
                    "file": "src/app/services/theme.service.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 193
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "children": []
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.routes.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "routes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.ts",
                "type": "component",
                "linktype": "component",
                "name": "App",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/page/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/components/theme-toggle/theme-toggle.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ThemeToggleComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/app-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AppDataService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/app-data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "DocumentationItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/app-data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MetroTile",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/app-data.service.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavigationItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ThemeService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/services/theme.service.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Theme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/material-theme/cli.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "outputDir",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/material-theme/cli.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "root",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/material-theme/theme-generator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "extractColors",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/material-theme/theme-generator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "generateThemeFiles",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/material-theme/theme-generator.ts",
                "type": "function",
                "linktype": "miscellaneous",
                "linksubtype": "function",
                "name": "getColorFromScheme",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/material-theme/theme-generator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "THEME_CSS_VARS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/material-theme/theme.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SCHEMES",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/material-theme/theme.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SEED_COLOR",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/material-theme/theme.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "SELECTED_SCHEME",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/lib/material-theme/theme.config.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SchemeConstructor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            }
        ]
    }
}